{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to temp_interpolation","text":"<p>A package for temporal interpolation of spatial data</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://ishwar97.github.io/temp_interpolation</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Interpolate temporally between image dates to create intermediate images</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#temp_interpolation.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>temp_interpolation/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/ishwar97/temp_interpolation/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>temp_interpolation could always use more documentation, whether as part of the official temp_interpolation docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/ishwar97/temp_interpolation/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up temp_interpolation for local development.</p> <ol> <li> <p>Fork the temp_interpolation repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/temp_interpolation.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv temp_interpolation\n$ cd temp_interpolation/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 temp_interpolation tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/ishwar97/temp_interpolation/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliummap/","title":"foliummap module","text":""},{"location":"foliummap/#temp_interpolation.foliummap.Map","title":"<code> Map            (Map)         </code>","text":"<p>A Folium Map subclass with additional helper methods for vector data and controls.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple</code> <p>Latitude and longitude for the map center. Defaults to (0, 0).</p> <code>(0, 0)</code> <code>zoom</code> <code>int</code> <p>Initial zoom level. Defaults to 3.</p> <code>3</code> <code>**kwargs</code> <p>Additional keyword arguments passed to folium.Map.</p> <code>{}</code> Source code in <code>temp_interpolation/foliummap.py</code> <pre><code>class Map(folium.Map):\n    \"\"\"A Folium Map subclass with additional helper methods for vector data and controls.\n\n    Args:\n        center (tuple, optional): Latitude and longitude for the map center. Defaults to (0, 0).\n        zoom (int, optional): Initial zoom level. Defaults to 3.\n        **kwargs: Additional keyword arguments passed to folium.Map.\n    \"\"\"\n\n    def __init__(self, center=(0, 0), zoom=3, **kwargs):\n        \"\"\"Initializes the Map object.\n\n        Args:\n            center (tuple, optional): Latitude and longitude for the map center. Defaults to (0, 0).\n            zoom (int, optional): Initial zoom level. Defaults to 3.\n            **kwargs: Additional keyword arguments passed to folium.Map.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n    def add_basemap(self, basemap=\"OpenTopoMap\"):\n        \"\"\"\n        Adds a basemap to the map.\n\n        Args:\n            basemap (str, optional): Name of the basemap to add. Defaults to \"OpenTopoMap\".\n                Available options include \"OpenStreetMap\", \"Stamen Terrain\", \"Stamen Toner\", \"Stamen Watercolor\", etc.\n\n        Raises:\n            Exception: If the specified basemap cannot be added, attempts to add it again.\n        \"\"\"\n        try:\n            layer = folium.TileLayer(tiles=basemap, name=basemap)\n            layer.add_to(self)\n        except:\n            layer = folium.TileLayer(tiles=basemap, name=basemap)\n            layer.add_to(self)\n\n    def add_google_map(self, map_type=\"ROADMAP\"):\n        \"\"\"\n        Adds a Google Maps tile layer to the map.\n\n        Args:\n            map_type (str, optional): Type of Google Map to add.\n                Available options are \"ROADMAP\", \"SATELLITE\", \"HYBRID\", and \"TERRAIN\". Defaults to \"ROADMAP\".\n        \"\"\"\n\n        map_types = {\"ROADMAP\": \"m\", \"SATELLITE\": \"s\", \"HYBRID\": \"h\", \"TERRAIN\": \"t\"}\n        map_attr = map_types[map_type.upper()]\n\n        url = (\n            f\"https://mt1.google.com/vt/lyrs={map_attr.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n        )\n        layer = folium.TileLayer(\n            tiles=url,\n            attr=\"Google\",\n            name=f\"Google {map_type.capitalize()}\",\n            overlay=True,\n        )\n        layer.add_to(self)\n\n    def add_vector(\n        self,\n        vector,\n        zoom_to_layer=True,\n        hover_style=None,\n        **kwargs,\n    ):\n        \"\"\"Adds a vector layer (GeoJSON or file) to the map.\n\n        Args:\n            vector (str or dict): Path to a vector file (e.g., shapefile, GeoJSON) or a GeoJSON-like dict.\n            zoom_to_layer (bool, optional): Whether to zoom to the layer bounds. Defaults to True.\n            hover_style (dict, optional): Style to apply on hover. Defaults to {'color':'yellow', 'fillOpacity':0.2}.\n            **kwargs: Additional keyword arguments passed to folium.GeoJson.\n        \"\"\"\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n        if isinstance(vector, str):\n            gdf = gpd.read_file(vector)\n            gdf = gdf.to_crs(epsg=4326)\n            data = gdf.__geo_interface__\n        elif isinstance(vector, dict):\n            data = vector\n\n        gjson = folium.GeoJson(data=data, highlight_style=hover_style, **kwargs)\n        gjson.add_to(self)\n\n        if zoom_to_layer:\n            self.fit_bounds(self.get_bounds())\n\n    def add_layer_control(self):\n        \"\"\"Adds a layer control widget to the map.\n\n        This control allows users to toggle the visibility of layers.\n        \"\"\"\n        folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliummap/#temp_interpolation.foliummap.Map.__init__","title":"<code>__init__(self, center=(0, 0), zoom=3, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the Map object.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple</code> <p>Latitude and longitude for the map center. Defaults to (0, 0).</p> <code>(0, 0)</code> <code>zoom</code> <code>int</code> <p>Initial zoom level. Defaults to 3.</p> <code>3</code> <code>**kwargs</code> <p>Additional keyword arguments passed to folium.Map.</p> <code>{}</code> Source code in <code>temp_interpolation/foliummap.py</code> <pre><code>def __init__(self, center=(0, 0), zoom=3, **kwargs):\n    \"\"\"Initializes the Map object.\n\n    Args:\n        center (tuple, optional): Latitude and longitude for the map center. Defaults to (0, 0).\n        zoom (int, optional): Initial zoom level. Defaults to 3.\n        **kwargs: Additional keyword arguments passed to folium.Map.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"foliummap/#temp_interpolation.foliummap.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenTopoMap')</code>","text":"<p>Adds a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Name of the basemap to add. Defaults to \"OpenTopoMap\". Available options include \"OpenStreetMap\", \"Stamen Terrain\", \"Stamen Toner\", \"Stamen Watercolor\", etc.</p> <code>'OpenTopoMap'</code> <p>Exceptions:</p> Type Description <code>Exception</code> <p>If the specified basemap cannot be added, attempts to add it again.</p> Source code in <code>temp_interpolation/foliummap.py</code> <pre><code>def add_basemap(self, basemap=\"OpenTopoMap\"):\n    \"\"\"\n    Adds a basemap to the map.\n\n    Args:\n        basemap (str, optional): Name of the basemap to add. Defaults to \"OpenTopoMap\".\n            Available options include \"OpenStreetMap\", \"Stamen Terrain\", \"Stamen Toner\", \"Stamen Watercolor\", etc.\n\n    Raises:\n        Exception: If the specified basemap cannot be added, attempts to add it again.\n    \"\"\"\n    try:\n        layer = folium.TileLayer(tiles=basemap, name=basemap)\n        layer.add_to(self)\n    except:\n        layer = folium.TileLayer(tiles=basemap, name=basemap)\n        layer.add_to(self)\n</code></pre>"},{"location":"foliummap/#temp_interpolation.foliummap.Map.add_google_map","title":"<code>add_google_map(self, map_type='ROADMAP')</code>","text":"<p>Adds a Google Maps tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>map_type</code> <code>str</code> <p>Type of Google Map to add. Available options are \"ROADMAP\", \"SATELLITE\", \"HYBRID\", and \"TERRAIN\". Defaults to \"ROADMAP\".</p> <code>'ROADMAP'</code> Source code in <code>temp_interpolation/foliummap.py</code> <pre><code>def add_google_map(self, map_type=\"ROADMAP\"):\n    \"\"\"\n    Adds a Google Maps tile layer to the map.\n\n    Args:\n        map_type (str, optional): Type of Google Map to add.\n            Available options are \"ROADMAP\", \"SATELLITE\", \"HYBRID\", and \"TERRAIN\". Defaults to \"ROADMAP\".\n    \"\"\"\n\n    map_types = {\"ROADMAP\": \"m\", \"SATELLITE\": \"s\", \"HYBRID\": \"h\", \"TERRAIN\": \"t\"}\n    map_attr = map_types[map_type.upper()]\n\n    url = (\n        f\"https://mt1.google.com/vt/lyrs={map_attr.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n    )\n    layer = folium.TileLayer(\n        tiles=url,\n        attr=\"Google\",\n        name=f\"Google {map_type.capitalize()}\",\n        overlay=True,\n    )\n    layer.add_to(self)\n</code></pre>"},{"location":"foliummap/#temp_interpolation.foliummap.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map.</p> <p>This control allows users to toggle the visibility of layers.</p> Source code in <code>temp_interpolation/foliummap.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Adds a layer control widget to the map.\n\n    This control allows users to toggle the visibility of layers.\n    \"\"\"\n    folium.LayerControl().add_to(self)\n</code></pre>"},{"location":"foliummap/#temp_interpolation.foliummap.Map.add_vector","title":"<code>add_vector(self, vector, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Adds a vector layer (GeoJSON or file) to the map.</p> <p>Parameters:</p> Name Type Description Default <code>vector</code> <code>str or dict</code> <p>Path to a vector file (e.g., shapefile, GeoJSON) or a GeoJSON-like dict.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer bounds. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style to apply on hover. Defaults to {'color':'yellow', 'fillOpacity':0.2}.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments passed to folium.GeoJson.</p> <code>{}</code> Source code in <code>temp_interpolation/foliummap.py</code> <pre><code>def add_vector(\n    self,\n    vector,\n    zoom_to_layer=True,\n    hover_style=None,\n    **kwargs,\n):\n    \"\"\"Adds a vector layer (GeoJSON or file) to the map.\n\n    Args:\n        vector (str or dict): Path to a vector file (e.g., shapefile, GeoJSON) or a GeoJSON-like dict.\n        zoom_to_layer (bool, optional): Whether to zoom to the layer bounds. Defaults to True.\n        hover_style (dict, optional): Style to apply on hover. Defaults to {'color':'yellow', 'fillOpacity':0.2}.\n        **kwargs: Additional keyword arguments passed to folium.GeoJson.\n    \"\"\"\n    import geopandas as gpd\n\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n    if isinstance(vector, str):\n        gdf = gpd.read_file(vector)\n        gdf = gdf.to_crs(epsg=4326)\n        data = gdf.__geo_interface__\n    elif isinstance(vector, dict):\n        data = vector\n\n    gjson = folium.GeoJson(data=data, highlight_style=hover_style, **kwargs)\n    gjson.add_to(self)\n\n    if zoom_to_layer:\n        self.fit_bounds(self.get_bounds())\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install temp_interpolation, run this command in your terminal:</p> <pre><code>pip install temp_interpolation\n</code></pre> <p>This is the preferred method to install temp_interpolation, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install temp_interpolation from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/ishwar97/temp_interpolation\n</code></pre>"},{"location":"temp_interpolation/","title":"temp_interpolation module","text":"<p>Main module.</p>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>class Map(ipyleaflet.Map):\n    def __init__(self, center=[19, 72], zoom=2, height=\"600px\", **kwargs):\n        \"\"\"Map class to create Map View\n\n        Args:\n            center (list, optional): Map Center. Defaults to [19, 72]\n            zoom (int, optional): Zoom level. Defaults to 2.\n            height (str, optional): Map Height. Defaults to \"600px\".\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n        self.scroll_wheel_zoom = True\n\n    def add_basemap(self, basemap=\"OpenStreetMap.Mapnik\"):\n        \"\"\"Adds basemap to Map View\n\n        Args:\n            basemap (str, optional): Base Map. Defaults to \"OpenStreetMapMapnik\".\n        \"\"\"\n\n        try:\n            url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n            layer = ipyleaflet.TileLayer(url=url, name=basemap)\n            self.add_layer(layer)\n        except:\n            url = eval(f\"ipyleaflet.basemaps.OpenStreetMap.Mapnik\").build_url()\n            layer = ipyleaflet.TileLayer(url=url, name=basemap)\n            self.add_layer(layer)\n\n    def add_google_map(self, map_type=\"ROADMAP\"):\n        \"\"\"Adds Google Maps layer to Map View\n\n        Args:\n            map_type (str, optional): Type of Google Map.\n                Defaults to \"ROADMAP\". Available options : \"ROADMAP\", \"SATELLITE\", \"HYBRID\",\"TERRAIN\"\n        \"\"\"\n\n        map_types = {\"ROADMAP\": \"m\", \"SATELLITE\": \"s\", \"HYBRID\": \"h\", \"TERRAIN\": \"t\"}\n        map_type = map_types[map_type.upper()]\n\n        url = (\n            f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n        )\n        layer = ipyleaflet.TileLayer(url=url, name=\"Google Map\")\n        self.add_layer(layer)\n\n    def add_vector(\n        self,\n        vector,\n        zoom_to_layer=True,\n        hover_style=None,\n        **kwargs,\n    ):\n        \"\"\"Adds Vector layer to Map View\n\n        Args:\n            vector (str or dict): URL or path to vector file. Can be a shapefile, GeoDataFrame, GeoJSON, etc.\n            zoom_to_layer (bool, optional): Whether to zoom to added layer. Defaults to True.\n            hover_style (dict, optional): Style to apply on hover. Defaults to Defaults to {'color':'yellow', 'fillOpacity':0.2}.\n            **kwargs: Additional keyword arguments passed to ipyleaflet.GeoJSON.\n        \"\"\"\n\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n        if isinstance(vector, str):\n            gdf = gpd.read_file(vector)\n            gdf = gdf.to_crs(epsg=4326)\n            data = gdf.__geo_interface__\n        elif isinstance(vector, dict):\n            data = vector\n\n        gjson = ipyleaflet.GeoJSON(data=data, hover_sytle=hover_style, **kwargs)\n        self.add_layer(gjson)\n\n        if zoom_to_layer:\n            bounds = gdf.total_bounds\n            self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_layer_control(self):\n        \"\"\"Adds Layer Control Button to Map View\n\n        This control allows users to toggle the visibility of layers.\n        \"\"\"\n        self.add_control(control=ipyleaflet.LayersControl())\n\n    def add_raster(self, url, name=None, colormap=None, opacity=None, **kwargs):\n        \"\"\"Adds Raster layer to Map View\n\n        Args:\n            url (str): URL or path to raster file. Can be a GeoTIFF, rasterio object, etc.\n            name (str, optional): Name of the layer. Defaults to None.\n            colormap (function, optional): Colormap function to apply to raster values. Defaults to None.\n            zoom_to_layer (bool, optional): Whether to zoom to added layer. Defaults to True.\n            **kwargs: Additional keyword arguments passed to ipyleaflet.ImageOverlay.\n        \"\"\"\n        from localtileserver import TileClient, get_leaflet_tile_layer\n\n        client = TileClient(url)\n        tile_layer = get_leaflet_tile_layer(\n            client, name=name, colormap=colormap, opacity=opacity, **kwargs\n        )\n        self.add_layer(tile_layer)\n        self.center = client.center()\n        self.zoom = client.default_zoom\n\n    def add_image(\n        self,\n        url,\n        bounds,\n        opacity=1,\n        **kwargs,\n    ):\n        \"\"\"Adds Image layer to Map View\n\n        Args:\n            url (str): URL or path to image file. Can be a PNG, JPEG, etc.\n            bounds (list): Bounds of the image in the format [[south, west], [north, east]].\n            opacity (float, optional): Opacity of the image layer. Defaults to 1.\n            **kwargs: Additional keyword arguments passed to ipyleaflet.ImageOverlay.\n        \"\"\"\n\n        layer = ipyleaflet.ImageOverlay(\n            url=url,\n            bounds=bounds,\n            opacity=opacity,\n            **kwargs,\n        )\n        self.add_layer(layer)\n\n    def add_video(\n        self,\n        url,\n        bounds,\n        opacity=1,\n        **kwargs,\n    ):\n        \"\"\"Adds Video layer to Map View\n\n        Args:\n            url (str): URL or path to video file. Can be a MP4, OGG, etc.\n            bounds (list): Bounds of the video in the format [[south, west], [north, east]].\n            opacity (float, optional): Opacity of the video layer. Defaults to 1.\n            **kwargs: Additional keyword arguments passed to ipyleaflet.VideoOverlay.\n        \"\"\"\n\n        layer = ipyleaflet.VideoOverlay(\n            url=url,\n            bounds=bounds,\n            opacity=opacity,\n            **kwargs,\n        )\n        self.add_layer(layer)\n\n    def add_wms_layer(\n        self,\n        url,\n        layers,\n        name=None,\n        format=\"image/png\",\n        transparent=True,\n        version=\"1.1.1\",\n        **kwargs,\n    ):\n        \"\"\"Adds WMS layer to Map View\n\n        Args:\n            url (str): URL of the WMS service.\n            layers (str): Comma-separated list of layer names to add.\n            name (str, optional): Name of the layer. Defaults to None.\n            format (str, optional): Image format. Defaults to \"image/png\".\n            transparent (bool, optional): Whether the image should have transparency. Defaults to True.\n            version (str, optional): WMS version. Defaults to \"1.1.1\".\n            **kwargs: Additional keyword arguments passed to ipyleaflet.WMSLayer.\n        \"\"\"\n\n        layer = ipyleaflet.WMSLayer(\n            url=url,\n            layers=layers,\n            name=name,\n            format=format,\n            transparent=transparent,\n            version=version,\n            **kwargs,\n        )\n        self.add_layer(layer)\n\n    def add_basemap_gui(self, options=None, position=\"topright\"):\n        \"\"\"Adds an interactive basemap gui to the map at the specified position.\n\n        Args:\n            options (list, optional): Defaults to None.\n                For available options, refer to ipyleaflet.basemaps.\n            position (str, optional): Position on the map to place the widget. Defaults to \"topright\".\n                Available options include \"topleft\", \"topright\", \"bottomleft\", and \"bottomright\".\n\n        Returns:\n            None\n        \"\"\"\n        from ipywidgets import widgets, jslink, FloatSlider\n\n        if options is None:\n            options = [\n                \"OpenStreetMap.Mapnik\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"CartoDB.DarkMatter\",\n            ]\n        print(options)\n        if \"OpenStreeMap.Mapnik\" not in options:\n            value = options[0]\n        else:\n            value = \"OpenStreeMap.Mapnik\"\n        basemap_dropdown = widgets.Dropdown(\n            options=options,\n            value=value,\n            description=\"Basemap:\",\n            style={\"description_width\": \"initial\"},\n            layout=widgets.Layout(width=\"150px\"),\n        )\n        basemap_dropdown.layout = widgets.Layout(width=\"250px\")\n\n        def on_basemap_change(change):\n            if change[\"type\"] == \"change\" and change[\"name\"] == \"value\":\n                self.add_basemap(basemap=change[\"new\"])\n\n        basemap_dropdown.observe(on_basemap_change)\n\n        toggle = widgets.ToggleButton(\n            value=True,\n            tooltip=\"Show/Hide Basemap Selector\",\n            button_style=\"\",\n            icon=\"map\",\n        )\n        toggle.layout = widgets.Layout(width=\"40px\")\n\n        button = widgets.Button(icon=\"times\")\n        button.layout = widgets.Layout(width=\"40px\")\n\n        hbox = widgets.HBox([toggle, basemap_dropdown, button])\n\n        def on_toggle_change(change):\n            if change[\"new\"]:\n                hbox.children = [toggle, basemap_dropdown, button]\n            else:\n                hbox.children = [toggle]\n\n        toggle.observe(on_toggle_change, names=\"value\")\n\n        def on_button_click(b):\n            hbox.close()\n            toggle.close()\n            basemap_dropdown.close()\n            button.close()\n\n        button.on_click(on_button_click)\n\n        control = ipyleaflet.WidgetControl(\n            widget=hbox,\n            position=position,\n        )\n        self.add_control(control)\n\n    def add_zoomSlider(self, position=\"bottomright\"):\n        \"\"\"Adds zoom slider to the map\n\n        Args:\n            position (str, optional): position on map where slider is to be added.\n\n        Returns:\n            None\n        \"\"\"\n        from ipywidgets import widgets, FloatSlider, jslink\n\n        zoom_slider = FloatSlider(\n            value=self.zoom,\n            min=1,\n            max=18,\n            step=1,\n            description=\"Zoom:\",\n            continuous_update=False,\n            orientation=\"horizontal\",\n            readout=True,\n            readout_format=\"d\",\n            layout=widgets.Layout(width=\"250px\"),\n        )\n        jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n        control = ipyleaflet.WidgetControl(\n            widget=zoom_slider,\n            position=position,\n        )\n        self.add_control(control)\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.__init__","title":"<code>__init__(self, center=[19, 72], zoom=2, height='600px', **kwargs)</code>  <code>special</code>","text":"<p>Map class to create Map View</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Map Center. Defaults to [19, 72]</p> <code>[19, 72]</code> <code>zoom</code> <code>int</code> <p>Zoom level. Defaults to 2.</p> <code>2</code> <code>height</code> <code>str</code> <p>Map Height. Defaults to \"600px\".</p> <code>'600px'</code> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def __init__(self, center=[19, 72], zoom=2, height=\"600px\", **kwargs):\n    \"\"\"Map class to create Map View\n\n    Args:\n        center (list, optional): Map Center. Defaults to [19, 72]\n        zoom (int, optional): Zoom level. Defaults to 2.\n        height (str, optional): Map Height. Defaults to \"600px\".\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    self.layout.height = height\n    self.scroll_wheel_zoom = True\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap.Mapnik')</code>","text":"<p>Adds basemap to Map View</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Base Map. Defaults to \"OpenStreetMapMapnik\".</p> <code>'OpenStreetMap.Mapnik'</code> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_basemap(self, basemap=\"OpenStreetMap.Mapnik\"):\n    \"\"\"Adds basemap to Map View\n\n    Args:\n        basemap (str, optional): Base Map. Defaults to \"OpenStreetMapMapnik\".\n    \"\"\"\n\n    try:\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add_layer(layer)\n    except:\n        url = eval(f\"ipyleaflet.basemaps.OpenStreetMap.Mapnik\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add_layer(layer)\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, options=None, position='topright')</code>","text":"<p>Adds an interactive basemap gui to the map at the specified position.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>list</code> <p>Defaults to None. For available options, refer to ipyleaflet.basemaps.</p> <code>None</code> <code>position</code> <code>str</code> <p>Position on the map to place the widget. Defaults to \"topright\". Available options include \"topleft\", \"topright\", \"bottomleft\", and \"bottomright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_basemap_gui(self, options=None, position=\"topright\"):\n    \"\"\"Adds an interactive basemap gui to the map at the specified position.\n\n    Args:\n        options (list, optional): Defaults to None.\n            For available options, refer to ipyleaflet.basemaps.\n        position (str, optional): Position on the map to place the widget. Defaults to \"topright\".\n            Available options include \"topleft\", \"topright\", \"bottomleft\", and \"bottomright\".\n\n    Returns:\n        None\n    \"\"\"\n    from ipywidgets import widgets, jslink, FloatSlider\n\n    if options is None:\n        options = [\n            \"OpenStreetMap.Mapnik\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"CartoDB.DarkMatter\",\n        ]\n    print(options)\n    if \"OpenStreeMap.Mapnik\" not in options:\n        value = options[0]\n    else:\n        value = \"OpenStreeMap.Mapnik\"\n    basemap_dropdown = widgets.Dropdown(\n        options=options,\n        value=value,\n        description=\"Basemap:\",\n        style={\"description_width\": \"initial\"},\n        layout=widgets.Layout(width=\"150px\"),\n    )\n    basemap_dropdown.layout = widgets.Layout(width=\"250px\")\n\n    def on_basemap_change(change):\n        if change[\"type\"] == \"change\" and change[\"name\"] == \"value\":\n            self.add_basemap(basemap=change[\"new\"])\n\n    basemap_dropdown.observe(on_basemap_change)\n\n    toggle = widgets.ToggleButton(\n        value=True,\n        tooltip=\"Show/Hide Basemap Selector\",\n        button_style=\"\",\n        icon=\"map\",\n    )\n    toggle.layout = widgets.Layout(width=\"40px\")\n\n    button = widgets.Button(icon=\"times\")\n    button.layout = widgets.Layout(width=\"40px\")\n\n    hbox = widgets.HBox([toggle, basemap_dropdown, button])\n\n    def on_toggle_change(change):\n        if change[\"new\"]:\n            hbox.children = [toggle, basemap_dropdown, button]\n        else:\n            hbox.children = [toggle]\n\n    toggle.observe(on_toggle_change, names=\"value\")\n\n    def on_button_click(b):\n        hbox.close()\n        toggle.close()\n        basemap_dropdown.close()\n        button.close()\n\n    button.on_click(on_button_click)\n\n    control = ipyleaflet.WidgetControl(\n        widget=hbox,\n        position=position,\n    )\n    self.add_control(control)\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_google_map","title":"<code>add_google_map(self, map_type='ROADMAP')</code>","text":"<p>Adds Google Maps layer to Map View</p> <p>Parameters:</p> Name Type Description Default <code>map_type</code> <code>str</code> <p>Type of Google Map. Defaults to \"ROADMAP\". Available options : \"ROADMAP\", \"SATELLITE\", \"HYBRID\",\"TERRAIN\"</p> <code>'ROADMAP'</code> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_google_map(self, map_type=\"ROADMAP\"):\n    \"\"\"Adds Google Maps layer to Map View\n\n    Args:\n        map_type (str, optional): Type of Google Map.\n            Defaults to \"ROADMAP\". Available options : \"ROADMAP\", \"SATELLITE\", \"HYBRID\",\"TERRAIN\"\n    \"\"\"\n\n    map_types = {\"ROADMAP\": \"m\", \"SATELLITE\": \"s\", \"HYBRID\": \"h\", \"TERRAIN\": \"t\"}\n    map_type = map_types[map_type.upper()]\n\n    url = (\n        f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n    )\n    layer = ipyleaflet.TileLayer(url=url, name=\"Google Map\")\n    self.add_layer(layer)\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_image","title":"<code>add_image(self, url, bounds, opacity=1, **kwargs)</code>","text":"<p>Adds Image layer to Map View</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL or path to image file. Can be a PNG, JPEG, etc.</p> required <code>bounds</code> <code>list</code> <p>Bounds of the image in the format [[south, west], [north, east]].</p> required <code>opacity</code> <code>float</code> <p>Opacity of the image layer. Defaults to 1.</p> <code>1</code> <code>**kwargs</code> <p>Additional keyword arguments passed to ipyleaflet.ImageOverlay.</p> <code>{}</code> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_image(\n    self,\n    url,\n    bounds,\n    opacity=1,\n    **kwargs,\n):\n    \"\"\"Adds Image layer to Map View\n\n    Args:\n        url (str): URL or path to image file. Can be a PNG, JPEG, etc.\n        bounds (list): Bounds of the image in the format [[south, west], [north, east]].\n        opacity (float, optional): Opacity of the image layer. Defaults to 1.\n        **kwargs: Additional keyword arguments passed to ipyleaflet.ImageOverlay.\n    \"\"\"\n\n    layer = ipyleaflet.ImageOverlay(\n        url=url,\n        bounds=bounds,\n        opacity=opacity,\n        **kwargs,\n    )\n    self.add_layer(layer)\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds Layer Control Button to Map View</p> <p>This control allows users to toggle the visibility of layers.</p> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Adds Layer Control Button to Map View\n\n    This control allows users to toggle the visibility of layers.\n    \"\"\"\n    self.add_control(control=ipyleaflet.LayersControl())\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_raster","title":"<code>add_raster(self, url, name=None, colormap=None, opacity=None, **kwargs)</code>","text":"<p>Adds Raster layer to Map View</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL or path to raster file. Can be a GeoTIFF, rasterio object, etc.</p> required <code>name</code> <code>str</code> <p>Name of the layer. Defaults to None.</p> <code>None</code> <code>colormap</code> <code>function</code> <p>Colormap function to apply to raster values. Defaults to None.</p> <code>None</code> <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to added layer. Defaults to True.</p> required <code>**kwargs</code> <p>Additional keyword arguments passed to ipyleaflet.ImageOverlay.</p> <code>{}</code> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_raster(self, url, name=None, colormap=None, opacity=None, **kwargs):\n    \"\"\"Adds Raster layer to Map View\n\n    Args:\n        url (str): URL or path to raster file. Can be a GeoTIFF, rasterio object, etc.\n        name (str, optional): Name of the layer. Defaults to None.\n        colormap (function, optional): Colormap function to apply to raster values. Defaults to None.\n        zoom_to_layer (bool, optional): Whether to zoom to added layer. Defaults to True.\n        **kwargs: Additional keyword arguments passed to ipyleaflet.ImageOverlay.\n    \"\"\"\n    from localtileserver import TileClient, get_leaflet_tile_layer\n\n    client = TileClient(url)\n    tile_layer = get_leaflet_tile_layer(\n        client, name=name, colormap=colormap, opacity=opacity, **kwargs\n    )\n    self.add_layer(tile_layer)\n    self.center = client.center()\n    self.zoom = client.default_zoom\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_vector","title":"<code>add_vector(self, vector, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Adds Vector layer to Map View</p> <p>Parameters:</p> Name Type Description Default <code>vector</code> <code>str or dict</code> <p>URL or path to vector file. Can be a shapefile, GeoDataFrame, GeoJSON, etc.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to added layer. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style to apply on hover. Defaults to Defaults to {'color':'yellow', 'fillOpacity':0.2}.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments passed to ipyleaflet.GeoJSON.</p> <code>{}</code> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_vector(\n    self,\n    vector,\n    zoom_to_layer=True,\n    hover_style=None,\n    **kwargs,\n):\n    \"\"\"Adds Vector layer to Map View\n\n    Args:\n        vector (str or dict): URL or path to vector file. Can be a shapefile, GeoDataFrame, GeoJSON, etc.\n        zoom_to_layer (bool, optional): Whether to zoom to added layer. Defaults to True.\n        hover_style (dict, optional): Style to apply on hover. Defaults to Defaults to {'color':'yellow', 'fillOpacity':0.2}.\n        **kwargs: Additional keyword arguments passed to ipyleaflet.GeoJSON.\n    \"\"\"\n\n    import geopandas as gpd\n\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n    if isinstance(vector, str):\n        gdf = gpd.read_file(vector)\n        gdf = gdf.to_crs(epsg=4326)\n        data = gdf.__geo_interface__\n    elif isinstance(vector, dict):\n        data = vector\n\n    gjson = ipyleaflet.GeoJSON(data=data, hover_sytle=hover_style, **kwargs)\n    self.add_layer(gjson)\n\n    if zoom_to_layer:\n        bounds = gdf.total_bounds\n        self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_video","title":"<code>add_video(self, url, bounds, opacity=1, **kwargs)</code>","text":"<p>Adds Video layer to Map View</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL or path to video file. Can be a MP4, OGG, etc.</p> required <code>bounds</code> <code>list</code> <p>Bounds of the video in the format [[south, west], [north, east]].</p> required <code>opacity</code> <code>float</code> <p>Opacity of the video layer. Defaults to 1.</p> <code>1</code> <code>**kwargs</code> <p>Additional keyword arguments passed to ipyleaflet.VideoOverlay.</p> <code>{}</code> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_video(\n    self,\n    url,\n    bounds,\n    opacity=1,\n    **kwargs,\n):\n    \"\"\"Adds Video layer to Map View\n\n    Args:\n        url (str): URL or path to video file. Can be a MP4, OGG, etc.\n        bounds (list): Bounds of the video in the format [[south, west], [north, east]].\n        opacity (float, optional): Opacity of the video layer. Defaults to 1.\n        **kwargs: Additional keyword arguments passed to ipyleaflet.VideoOverlay.\n    \"\"\"\n\n    layer = ipyleaflet.VideoOverlay(\n        url=url,\n        bounds=bounds,\n        opacity=opacity,\n        **kwargs,\n    )\n    self.add_layer(layer)\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_wms_layer","title":"<code>add_wms_layer(self, url, layers, name=None, format='image/png', transparent=True, version='1.1.1', **kwargs)</code>","text":"<p>Adds WMS layer to Map View</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL of the WMS service.</p> required <code>layers</code> <code>str</code> <p>Comma-separated list of layer names to add.</p> required <code>name</code> <code>str</code> <p>Name of the layer. Defaults to None.</p> <code>None</code> <code>format</code> <code>str</code> <p>Image format. Defaults to \"image/png\".</p> <code>'image/png'</code> <code>transparent</code> <code>bool</code> <p>Whether the image should have transparency. Defaults to True.</p> <code>True</code> <code>version</code> <code>str</code> <p>WMS version. Defaults to \"1.1.1\".</p> <code>'1.1.1'</code> <code>**kwargs</code> <p>Additional keyword arguments passed to ipyleaflet.WMSLayer.</p> <code>{}</code> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_wms_layer(\n    self,\n    url,\n    layers,\n    name=None,\n    format=\"image/png\",\n    transparent=True,\n    version=\"1.1.1\",\n    **kwargs,\n):\n    \"\"\"Adds WMS layer to Map View\n\n    Args:\n        url (str): URL of the WMS service.\n        layers (str): Comma-separated list of layer names to add.\n        name (str, optional): Name of the layer. Defaults to None.\n        format (str, optional): Image format. Defaults to \"image/png\".\n        transparent (bool, optional): Whether the image should have transparency. Defaults to True.\n        version (str, optional): WMS version. Defaults to \"1.1.1\".\n        **kwargs: Additional keyword arguments passed to ipyleaflet.WMSLayer.\n    \"\"\"\n\n    layer = ipyleaflet.WMSLayer(\n        url=url,\n        layers=layers,\n        name=name,\n        format=format,\n        transparent=transparent,\n        version=version,\n        **kwargs,\n    )\n    self.add_layer(layer)\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_zoomSlider","title":"<code>add_zoomSlider(self, position='bottomright')</code>","text":"<p>Adds zoom slider to the map</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>position on map where slider is to be added.</p> <code>'bottomright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_zoomSlider(self, position=\"bottomright\"):\n    \"\"\"Adds zoom slider to the map\n\n    Args:\n        position (str, optional): position on map where slider is to be added.\n\n    Returns:\n        None\n    \"\"\"\n    from ipywidgets import widgets, FloatSlider, jslink\n\n    zoom_slider = FloatSlider(\n        value=self.zoom,\n        min=1,\n        max=18,\n        step=1,\n        description=\"Zoom:\",\n        continuous_update=False,\n        orientation=\"horizontal\",\n        readout=True,\n        readout_format=\"d\",\n        layout=widgets.Layout(width=\"250px\"),\n    )\n    jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n    control = ipyleaflet.WidgetControl(\n        widget=zoom_slider,\n        position=position,\n    )\n    self.add_control(control)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use temp_interpolation in a project:</p> <pre><code>import temp_interpolation\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World!\")\n</pre> print(\"Hello World!\") <pre>Hello World!\n</pre>"},{"location":"examples/map/","title":"Map","text":"In\u00a0[1]: Copied! <pre>import temp_interpolation\n</pre> import temp_interpolation In\u00a0[2]: Copied! <pre>m = temp_interpolation.Map(center=[23, 76], zoom=4, height=\"300px\")\nm.add_basemap(\"OpenTopoMap\")\nm.add_google_map(\"satellite\")\n</pre> m = temp_interpolation.Map(center=[23, 76], zoom=4, height=\"300px\") m.add_basemap(\"OpenTopoMap\") m.add_google_map(\"satellite\") In\u00a0[3]: Copied! <pre>m.add_layer_control()\n</pre> m.add_layer_control() In\u00a0[4]: Copied! <pre>url = (\n    \"https://github.com/opengeos/datasets/releases/download/world/world_cities.geojson\"\n)\nm.add_vector(url, zoom_to_layer=False, hover_style={\"fillColor\": \"red\"})\nm\n</pre> url = (     \"https://github.com/opengeos/datasets/releases/download/world/world_cities.geojson\" ) m.add_vector(url, zoom_to_layer=False, hover_style={\"fillColor\": \"red\"}) m Out[4]: In\u00a0[5]: Copied! <pre>import temp_interpolation.foliummap as fmap\n</pre> import temp_interpolation.foliummap as fmap In\u00a0[6]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\"\nm = fmap.Map(center=(19, 75), zoom=5, height=\"300px\")\nm.add_vector(url, zoom_to_layer=True, name=\"Countries\")\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\" m = fmap.Map(center=(19, 75), zoom=5, height=\"300px\") m.add_vector(url, zoom_to_layer=True, name=\"Countries\") In\u00a0[7]: Copied! <pre>m.add_basemap(\"OpenTopoMap\")\nm.add_google_map(\"satellite\")\nm.add_layer_control()\nm\n</pre> m.add_basemap(\"OpenTopoMap\") m.add_google_map(\"satellite\") m.add_layer_control() m Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/map/#task-1-ipyleaflet-map-class-integration","title":"Task 1 Ipyleaflet Map Class Integration\u00b6","text":""},{"location":"examples/map/#task-2","title":"Task 2\u00b6","text":""},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import temp_interpolation\n</pre> import temp_interpolation In\u00a0[2]: Copied! <pre>m = temp_interpolation.Map(center=(40, -100), zoom=3)\n</pre> m = temp_interpolation.Map(center=(40, -100), zoom=3) In\u00a0[3]: Copied! <pre># Task 1: Add a raster layer to the map\nfilename = r\"https://github.com/opengeos/datasets/releases/download/hydrology/dem.tif\"\nm.add_raster(filename, name=\"DEM\", opacity=1, colormap=\"terrain\")\n</pre> # Task 1: Add a raster layer to the map filename = r\"https://github.com/opengeos/datasets/releases/download/hydrology/dem.tif\" m.add_raster(filename, name=\"DEM\", opacity=1, colormap=\"terrain\") In\u00a0[4]: Copied! <pre># Task 2: Add a static image overlay on the map\nm.add_image(\n    url=\"https://www.thepetexpress.co.uk/blog-admin/wp-content/uploads/2015/09/bordeaux-869020_1280.jpg\",\n    name=\"Dog\",\n    opacity=1,\n    bounds=[[43, -119], [45, -122]],\n)\n</pre> # Task 2: Add a static image overlay on the map m.add_image(     url=\"https://www.thepetexpress.co.uk/blog-admin/wp-content/uploads/2015/09/bordeaux-869020_1280.jpg\",     name=\"Dog\",     opacity=1,     bounds=[[43, -119], [45, -122]], ) In\u00a0[5]: Copied! <pre># Task 3: Add a video overlay on the map\nm.add_video(\n    url=\"https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4\",\n    bounds=[[37.56238816, -122.515963], [37.563391708, -122.5130939]],\n    name=\"Drone Video\",\n    opacity=0.8,\n)\n</pre> # Task 3: Add a video overlay on the map m.add_video(     url=\"https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4\",     bounds=[[37.56238816, -122.515963], [37.563391708, -122.5130939]],     name=\"Drone Video\",     opacity=0.8, ) In\u00a0[6]: Copied! <pre># Task 4: Add a wms layer overlay on the map\n\nm.add_wms_layer(\n    url=\"https://www.mrlc.gov/geoserver/ows?\",\n    layers=\"mrlc_display:NLCD_2021_Land_Cover_L48\",\n    name=\"NLCD Land Cover\",\n    format=\"image/png\",\n    transparent=True,\n    version=\"1.1.0\",\n    attribution=\"NLCD Land Cover\",\n    opacity=1,\n)\nm.add_layer_control()\nm\n</pre> # Task 4: Add a wms layer overlay on the map  m.add_wms_layer(     url=\"https://www.mrlc.gov/geoserver/ows?\",     layers=\"mrlc_display:NLCD_2021_Land_Cover_L48\",     name=\"NLCD Land Cover\",     format=\"image/png\",     transparent=True,     version=\"1.1.0\",     attribution=\"NLCD Land Cover\",     opacity=1, ) m.add_layer_control() m Out[6]:"},{"location":"examples/raster/#lab-7-raster-data-and-static-image-overlay","title":"Lab 7 Raster data and static image overlay\u00b6","text":""},{"location":"examples/widgets/","title":"Widgets","text":"In\u00a0[1]: Copied! <pre>import temp_interpolation\n</pre> import temp_interpolation In\u00a0[2]: Copied! <pre>m = temp_interpolation.Map()\n</pre> m = temp_interpolation.Map() In\u00a0[3]: Copied! <pre>options = [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"CartoDB.DarkMatter\"]\nm.add_basemap_gui(options=options, position=\"topright\")\n</pre> options = [\"OpenStreetMap.Mapnik\", \"OpenTopoMap\", \"CartoDB.DarkMatter\"] m.add_basemap_gui(options=options, position=\"topright\") <pre>['OpenStreetMap.Mapnik', 'OpenTopoMap', 'CartoDB.DarkMatter']\n</pre> In\u00a0[4]: Copied! <pre>m.add_zoomSlider(position=\"bottomright\")\nm\n</pre> m.add_zoomSlider(position=\"bottomright\") m Out[4]:"},{"location":"examples/widgets/#lab-8-adding-interactive-widgets-to-map","title":"Lab 8 : Adding Interactive Widgets to Map\u00b6","text":""}]}