{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to temp_interpolation","text":"<p>A package for temporal interpolation of spatial data</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://ishwar97.github.io/temp_interpolation</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Interpolate temporally between image dates to create intermediate images</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#temp_interpolation.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>temp_interpolation/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/ishwar97/temp_interpolation/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>temp_interpolation could always use more documentation, whether as part of the official temp_interpolation docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/ishwar97/temp_interpolation/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up temp_interpolation for local development.</p> <ol> <li> <p>Fork the temp_interpolation repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/temp_interpolation.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv temp_interpolation\n$ cd temp_interpolation/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 temp_interpolation tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/ishwar97/temp_interpolation/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install temp_interpolation, run this command in your terminal:</p> <pre><code>pip install temp_interpolation\n</code></pre> <p>This is the preferred method to install temp_interpolation, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install temp_interpolation from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/ishwar97/temp_interpolation\n</code></pre>"},{"location":"temp_interpolation/","title":"temp_interpolation module","text":"<p>Main module.</p>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>class Map(ipyleaflet.Map):\n    def __init__(self, center=[19, 72], zoom=2, height=\"600px\", **kwargs):\n        \"\"\"Map class to create Map View\n\n        Args:\n            center (list, optional): Map Center. Defaults to [19, 72]\n            zoom (int, optional): Zoom level. Defaults to 2.\n            height (str, optional): Map Height. Defaults to \"600px\".\n        \"\"\"\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n        self.scroll_wheel_zoom = True\n\n    def add_basemap(self, basemap=\"OpenTopoMap\"):\n        \"\"\"Adds basemap to Map View\n\n        Args:\n            basemap (str, optional): Base Map. Defaults to \"OpenTopoMap\".\n        \"\"\"\n\n        try:\n            url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n            layer = ipyleaflet.TileLayer(url=url, name=basemap)\n            self.add_layer(layer)\n        except:\n            url = eval(f\"ipyleaflet.basemaps.OpenTopoMap\").build_url()\n            layer = ipyleaflet.TileLayer(url=url, name=basemap)\n            self.add_layer(layer)\n\n    def add_google_map(self, map_type=\"ROADMAP\"):\n        \"\"\"Adds Google Maps layer to Map View\n\n        Args:\n            map_type (str, optional): Type of Google Map.\n                Defaults to \"ROADMAP\". Available options : \"ROADMAP\", \"SATELLITE\", \"HYBRID\",\"TERRAIN\"\n        \"\"\"\n\n        map_types = {\"ROADMAP\": \"m\", \"SATELLITE\": \"s\", \"HYBRID\": \"h\", \"TERRAIN\": \"t\"}\n        map_type = map_types[map_type.upper()]\n\n        url = (\n            f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n        )\n        layer = ipyleaflet.TileLayer(url=url, name=\"Google Map\")\n        self.add_layer(layer)\n\n    def add_vector(\n        self,\n        vector,\n        zoom_to_layer=True,\n        hover_style=None,\n        **kwargs,\n    ):\n        \"\"\"Adds Vector layer to Map View\n\n        Args:\n            vector (str or dict): URL or path to vector file. Can be a shapefile, GeoDataFrame, GeoJSON, etc.\n            zoom_to_layer (bool, optional): Whether to zoom to added layer. Defaults to True.\n            hover_style (dict, optional): Style to apply on hover. Defaults to Defaults to {'color':'yellow', 'fillOpacity':0.2}.\n            **kwargs: Additional keyword arguments passed to ipyleaflet.GeoJSON.\n        \"\"\"\n\n        import geopandas as gpd\n\n        if hover_style is None:\n            hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n        if isinstance(vector, str):\n            gdf = gpd.read_file(vector)\n            gdf = gdf.to_crs(epsg=4326)\n            data = gdf.__geo_interface__\n        elif isinstance(vector, dict):\n            data = vector\n\n        gjson = ipyleaflet.GeoJSON(data=data, hover_sytle=hover_style, **kwargs)\n        self.add_layer(gjson)\n\n        if zoom_to_layer:\n            bounds = gdf.total_bounds\n            self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n\n    def add_layer_control(self):\n        \"\"\"Adds Layer Control Button to Map View\n\n        This control allows users to toggle the visibility of layers.\n        \"\"\"\n        self.add_control(control=ipyleaflet.LayersControl())\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.__init__","title":"<code>__init__(self, center=[19, 72], zoom=2, height='600px', **kwargs)</code>  <code>special</code>","text":"<p>Map class to create Map View</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Map Center. Defaults to [19, 72]</p> <code>[19, 72]</code> <code>zoom</code> <code>int</code> <p>Zoom level. Defaults to 2.</p> <code>2</code> <code>height</code> <code>str</code> <p>Map Height. Defaults to \"600px\".</p> <code>'600px'</code> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def __init__(self, center=[19, 72], zoom=2, height=\"600px\", **kwargs):\n    \"\"\"Map class to create Map View\n\n    Args:\n        center (list, optional): Map Center. Defaults to [19, 72]\n        zoom (int, optional): Zoom level. Defaults to 2.\n        height (str, optional): Map Height. Defaults to \"600px\".\n    \"\"\"\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    self.layout.height = height\n    self.scroll_wheel_zoom = True\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_basemap","title":"<code>add_basemap(self, basemap='OpenTopoMap')</code>","text":"<p>Adds basemap to Map View</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Base Map. Defaults to \"OpenTopoMap\".</p> <code>'OpenTopoMap'</code> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_basemap(self, basemap=\"OpenTopoMap\"):\n    \"\"\"Adds basemap to Map View\n\n    Args:\n        basemap (str, optional): Base Map. Defaults to \"OpenTopoMap\".\n    \"\"\"\n\n    try:\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add_layer(layer)\n    except:\n        url = eval(f\"ipyleaflet.basemaps.OpenTopoMap\").build_url()\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add_layer(layer)\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_google_map","title":"<code>add_google_map(self, map_type='ROADMAP')</code>","text":"<p>Adds Google Maps layer to Map View</p> <p>Parameters:</p> Name Type Description Default <code>map_type</code> <code>str</code> <p>Type of Google Map. Defaults to \"ROADMAP\". Available options : \"ROADMAP\", \"SATELLITE\", \"HYBRID\",\"TERRAIN\"</p> <code>'ROADMAP'</code> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_google_map(self, map_type=\"ROADMAP\"):\n    \"\"\"Adds Google Maps layer to Map View\n\n    Args:\n        map_type (str, optional): Type of Google Map.\n            Defaults to \"ROADMAP\". Available options : \"ROADMAP\", \"SATELLITE\", \"HYBRID\",\"TERRAIN\"\n    \"\"\"\n\n    map_types = {\"ROADMAP\": \"m\", \"SATELLITE\": \"s\", \"HYBRID\": \"h\", \"TERRAIN\": \"t\"}\n    map_type = map_types[map_type.upper()]\n\n    url = (\n        f\"https://mt1.google.com/vt/lyrs={map_type.lower()}&amp;x={{x}}&amp;y={{y}}&amp;z={{z}}\"\n    )\n    layer = ipyleaflet.TileLayer(url=url, name=\"Google Map\")\n    self.add_layer(layer)\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds Layer Control Button to Map View</p> <p>This control allows users to toggle the visibility of layers.</p> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Adds Layer Control Button to Map View\n\n    This control allows users to toggle the visibility of layers.\n    \"\"\"\n    self.add_control(control=ipyleaflet.LayersControl())\n</code></pre>"},{"location":"temp_interpolation/#temp_interpolation.temp_interpolation.Map.add_vector","title":"<code>add_vector(self, vector, zoom_to_layer=True, hover_style=None, **kwargs)</code>","text":"<p>Adds Vector layer to Map View</p> <p>Parameters:</p> Name Type Description Default <code>vector</code> <code>str or dict</code> <p>URL or path to vector file. Can be a shapefile, GeoDataFrame, GeoJSON, etc.</p> required <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to added layer. Defaults to True.</p> <code>True</code> <code>hover_style</code> <code>dict</code> <p>Style to apply on hover. Defaults to Defaults to {'color':'yellow', 'fillOpacity':0.2}.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments passed to ipyleaflet.GeoJSON.</p> <code>{}</code> Source code in <code>temp_interpolation/temp_interpolation.py</code> <pre><code>def add_vector(\n    self,\n    vector,\n    zoom_to_layer=True,\n    hover_style=None,\n    **kwargs,\n):\n    \"\"\"Adds Vector layer to Map View\n\n    Args:\n        vector (str or dict): URL or path to vector file. Can be a shapefile, GeoDataFrame, GeoJSON, etc.\n        zoom_to_layer (bool, optional): Whether to zoom to added layer. Defaults to True.\n        hover_style (dict, optional): Style to apply on hover. Defaults to Defaults to {'color':'yellow', 'fillOpacity':0.2}.\n        **kwargs: Additional keyword arguments passed to ipyleaflet.GeoJSON.\n    \"\"\"\n\n    import geopandas as gpd\n\n    if hover_style is None:\n        hover_style = {\"color\": \"yellow\", \"fillOpacity\": 0.2}\n\n    if isinstance(vector, str):\n        gdf = gpd.read_file(vector)\n        gdf = gdf.to_crs(epsg=4326)\n        data = gdf.__geo_interface__\n    elif isinstance(vector, dict):\n        data = vector\n\n    gjson = ipyleaflet.GeoJSON(data=data, hover_sytle=hover_style, **kwargs)\n    self.add_layer(gjson)\n\n    if zoom_to_layer:\n        bounds = gdf.total_bounds\n        self.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use temp_interpolation in a project:</p> <pre><code>import temp_interpolation\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World!\")\n</pre> print(\"Hello World!\") <pre>Hello World!\n</pre>"},{"location":"examples/map/","title":"Map","text":"In\u00a0[1]: Copied! <pre>import temp_interpolation\n</pre> import temp_interpolation In\u00a0[2]: Copied! <pre>m = temp_interpolation.Map(center=[23, 76], zoom=4, height=\"300px\")\nm.add_basemap(\"OpenTopoMap\")\nm.add_google_map(\"satellite\")\n</pre> m = temp_interpolation.Map(center=[23, 76], zoom=4, height=\"300px\") m.add_basemap(\"OpenTopoMap\") m.add_google_map(\"satellite\") In\u00a0[3]: Copied! <pre>m.add_layer_control()\n</pre> m.add_layer_control() In\u00a0[4]: Copied! <pre>url = (\n    \"https://github.com/opengeos/datasets/releases/download/world/world_cities.geojson\"\n)\nm.add_vector(url, zoom_to_layer=False, hover_style={\"fillColor\": \"red\"})\nm\n</pre> url = (     \"https://github.com/opengeos/datasets/releases/download/world/world_cities.geojson\" ) m.add_vector(url, zoom_to_layer=False, hover_style={\"fillColor\": \"red\"}) m Out[4]: In\u00a0[5]: Copied! <pre>import temp_interpolation.foliummap as fmap\n</pre> import temp_interpolation.foliummap as fmap In\u00a0[6]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\"\nm = fmap.Map(center=(19, 75), zoom=5, height=\"300px\")\nm.add_vector(url, zoom_to_layer=True, name=\"Countries\")\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/world/countries.geojson\" m = fmap.Map(center=(19, 75), zoom=5, height=\"300px\") m.add_vector(url, zoom_to_layer=True, name=\"Countries\") In\u00a0[7]: Copied! <pre>m.add_basemap(\"OpenTopoMap\")\nm.add_google_map(\"satellite\")\nm.add_layer_control()\nm\n</pre> m.add_basemap(\"OpenTopoMap\") m.add_google_map(\"satellite\") m.add_layer_control() m Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/map/#task-1-ipyleaflet-map-class-integration","title":"Task 1 Ipyleaflet Map Class Integration\u00b6","text":""},{"location":"examples/map/#task-2","title":"Task 2\u00b6","text":""}]}